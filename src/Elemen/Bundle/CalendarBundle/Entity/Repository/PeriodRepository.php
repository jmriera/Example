<?php

namespace Elemen\Bundle\CalendarBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Elemen\Bundle\CalendarBundle\Entity\Period;
use Oro\Bundle\CalendarBundle\Entity\SystemCalendar;

/**
 * PeriodRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class PeriodRepository extends EntityRepository
{

    public function updateDefaultPeriods(int $num, SystemCalendar $systemCalendar)
    {
        $periods = $this->findBy(['systemCalendar' => $systemCalendar->getId()], ['priority' => 'DESC']);
        $name = '1';
        $priority = 1;

        if (count($periods) < $num && count($periods) <> 0 ) {
            /** @var Period $period */
            $period = current($periods);
            $name = $period->getShortName();
            $priority = $period->getPriority();
            $priority++; $name++;
        }

        for ($i = count($periods); $i < $num; $i++) {
            $period = new Period($name,$name,$priority,$systemCalendar);
            $priority++; $name++;
            $this->getEntityManager()->persist($period);
        }
        $this->getEntityManager()->flush();

    }

    /**
     * @param $calendarId
     * @return int|null
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countPeriods($calendarId)
    {
        if(!$calendarId) return null;

        return (int) $this->getQueryBuilder()
            ->select('COUNT(p.id)')
            ->leftJoin('p.systemCalendar','sc')
            ->where('sc.id = :id')
            ->setParameter('id', $calendarId)
            ->getQuery()
            ->getSingleScalarResult()
            ;

    }

    /**
     * @param $calendarId
     * @return array
     */
    public function getPeriodsByCalendarId($calendarId)
    {
        return $this->getPeriodsByCalendarIdQueryBuilder($calendarId)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $calendarId
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getPeriodsByCalendarIdQueryBuilder($calendarId)
    {
        return $this->getQueryBuilder()
            ->leftJoin('p.systemCalendar','sc')
            ->where('sc.id = :id')
            ->setParameter('id', $calendarId)
            ->orderBy('p.priority', 'ASC');
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilder()
    {
        return $this->createQueryBuilder('p');
    }
}
